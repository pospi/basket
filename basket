#!/bin/env bash

readonly SUCCESS=0
readonly FAILURE=1

# One day, this assumption will prove false...
readonly ROOT_USERNAME=root

readonly COMPOSER_INSTALL_PATH=/usr/local/bin/composer
readonly COMPOSER_INSTALLER_URL=https://getcomposer.org/composer.phar

# Detect base path for resolution in other scripts. @see http://stackoverflow.com/a/246128/141881

basket__path() {
    local DIR=""
    local SOURCE="${BASH_SOURCE[0]}"
    while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
      TARGET="$(readlink "$SOURCE")"
      if [[ $SOURCE == /* ]]; then
        # echo "SOURCE '$SOURCE' is an absolute symlink to '$TARGET'"
        SOURCE="$TARGET"
      else
        DIR="$( dirname "$SOURCE" )"
        # echo "SOURCE '$SOURCE' is a relative symlink to '$TARGET' (relative to '$DIR')"
        SOURCE="$DIR/$TARGET" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
      fi
    done
    # echo "SOURCE is '$SOURCE'"
    RDIR="$( dirname "$SOURCE" )"
    DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
    echo "$DIR"
}

# Load up basket library files (from above dir)

basket__loaded_files=()

basket__include() {
    local path=$1
    local fullpath="$(basket__path)/lib/${path}"

    basket__loaded_files=("${basket__loaded_files[@]}" "$fullpath")

    . $fullpath
}

#
# Base utility commands
#
# These exist mostly just to make bash more readable
#

command_exists() {
    local command_name=$1
    command -v "${command_name}" 1>/dev/null 2>/dev/null
}

err_msg() {
    local args=$@
    echo ${args} >&2
}

is_var_empty() {
    local var=$1

    [[ -z $var ]]
}

is_var_not_empty() {
    local var=$1

    [[ -n $var ]]
}

is_file() {
    local file=$1

    [[ -f $file ]]
}

is_dir() {
    local dir=$1

    [[ -d $dir ]]
}

is_yes_or_no() {
    local value=$1

    case ${value} in
    (yes | no)
        return ${SUCCESS}
        ;;
    esac
    return ${FAILURE}
}

is_one_word() {
    local value=$1

    local word_count=$(echo "${value}" | wc -w)
    if [[ ${word_count} = 1 ]]; then
        return ${SUCCESS}
    fi

    return ${FAILURE}
}

resolve_file_path_template() {
    local file_path_template=$1

    local value=$2
    local option=${value}

    local config=${BASKET_CONFIG_PATH}

    eval "echo ${file_path_template}"
}

is_file_at() {
    local tested_value=$1
    local file_path_template=$2

    local file_path=$( \
        resolve_file_path_template \
            ${file_path_template} \
            ${tested_value} \
    )

    is_file ${file_path}
}

is_config_file() {
    local filename=$1

    is_file_at \
        ${filename} \
        '${config}/${filename}'
}

is_config_file_at() {
    local value=$1
    local config_file_path_template=$2

    # Prepend '${config}/' to template given
    local file_path_template=$(
        echo '${config}/' ${config_file_path_template}
    )
    is_file_at ${value} ${file_path_template}
}

find_replace_in_file() {
    local find_pattern=$1
    local replace_string=$2
    local file_path=$3

    ex -s -c "%substitute/${find_pattern}/${replace_string}/g|x" "${file_path}"
}

#
# Scripting commands
#
# Useful for describing certain tasks in scripts
#

exit_if_failure() {
    local last_exit_code=$?
    local message=$@

    if [[ "${last_exit_code}" != "0" ]]; then
        # Show error message if given
        if is_var_not_empty ${message}; then
            err_msg "${message} (Exit code: ${last_exit_code})"
        # Show generic error message otherwise
        else
            err_msg "Last command gave non-zero exit code: ${last_exit_code}"
        fi

        exit ${last_exit_code}

    else
        return ${SUCCESS}

    fi
}

warn_if_failure() {
    local last_exit_code=$?
    local message=$@

    if [[ "${last_exit_code}" != "0" ]]; then
        # Show specific error message if given
        if is_var_not_empty ${message}; then
            err_msg "${message} (Exit code: ${last_exit_code})"
        # Show generic error message otherwise
        else
            err_msg "Last command gave non-zero exit code: ${last_exit_code}"
        fi
    fi

    return ${SUCCESS}
}

with_sudo() {
    local commands=$@

    # If we're already root, don't use sudo (we may not even have it yet)
    if [[ "$(whoami)" = "${ROOT_USERNAME}" ]]; then
        # Just run the given command and return its exit code
        eval "${commands}"
        return $?
    fi

    if ! command_exists sudo; then
        err_msg "Could not find sudo to run command: ${command}"
        return ${FAILURE}
    fi

    # We're not root, and we have sudo
    as_user "${ROOT_USERNAME}" "${commands}"
}

get_webserver_user() {
    # TODO Make this use the appropriate user based on distro
    # This is appropriate on Ubuntu and I think CentOS
    # Maybe not everywhere
    echo "www-data"
}

get_webserver_home_dir() {
    # TODO Make this use "eval echo $(www-data)" or similar
    echo "/var/www/"
}

create_webserver_home_dir() {
    # This could perhaps be rewritten as generic
    # "ensure user has a home dir with sensible perms" command

    local home_dir=$(get_webserver_home_dir)
    local user=$(get_webserver_user)

    echo Creating ${home_dir} for ${user}...

    with_sudo "\
        mkdir -p ${home_dir} \
            && chown ${user}:${user} ${home_dir} \
            && chmod u=rwx ${home_dir}
    " && echo Done creating directory ${home_dir} for ${user}.
}

with_basket_sourced() {
    local commands=$@

    local includes=""

    for lib in "${basket__loaded_files[@]}"
	do
		includes="$includes; . ${lib}"
	done

    echo ". \"$(basket__path)/basket\" $includes; ${commands} "
}

as_user() {
    local username=$1; shift
    local commands=$@

    local wrapped_commands=$(
            with_basket_sourced ${commands}
    )

    # TODO The --set-home is used because otherwise ~ is expanded to ~root
    # There might be a better way to work around this.
    #
    # This would be "sudo --user=... --set-home bash ...", but some older
    # sudo versions don't support long option names (eg Amazon Linux's)
    sudo \
        -u "${username}" \
        -H \
        bash -c "${wrapped_commands}"
}

as_webserver_user() {
    local commands=$@

    as_user "$(get_webserver_user)" "${commands}"
}

config_file() {
    local file_path=$1

    echo "${BASKET_CONFIG_PATH}/${file_path}"
}

timestamp() {
    # Echoes a timestamp from the current time, suitable for use in filenames.
    #
    # Example output, called at 1:37pm 19th August 2014:
    #
    #     2014-08-19_13-37-01
    #
    # Example usage:
    #
    #     ./my_long_script > my_log_file_$(timestamp).log
    #
    date +"%Y-%m-%d_%H-%M-%S"
}

pushd_q() {
    # Quiet version of pushd.
    #
    # Ordinary pushd prints the state of its directory stack whenever its
    # called. This is undesired in a script.
    local args=$@

    # FYI: pushd is like cd, but it saves the current directory before changing.
    # You can then call popd to get back to the previous directory.
    pushd "${args}" > /dev/null
}

popd_q() {
    # Quiet version of popd
    #
    # Ordinary popd prints the state of its directory stack whenever its
    # called. This is undesired in a script.
    popd > /dev/null
}


#
# Platform detection
#
# This could be a bit more robust.

is_platform() {
    local platform_name=$1

    grep -i "${platform_name}" /etc/issue >/dev/null
}

#
# OS package management
#

using_apt() {
    command_exists apt-get
}

using_yum() {
    command_exists yum
}

using_pacman() {
    command_exists pacman
}

if using_apt; then
    # XXX: Not sure if I should be doing this here
    # This should help apt-get and debconf be a bit quieter
    export DEBIAN_FRONTEND=noninteractive

    update_package_lists() {
        echo "Updating package lists (apt)"
        with_sudo apt-get -qq update
    }

    install_packages() {
        local package_names=$@
        echo Installing packages: ${package_names}
        with_sudo apt-get -qq install ${package_names} 1>/dev/null
    }

    is_package_installed() {
        local package_name=$1
        with_sudo dpkg-query -W -f='${Status}' ${package_name} 2>&1 \
            | grep "ok installed" 1>/dev/null
    }

    upgrade_packages() {
        echo "Upgrading packages with pending upgrades (apt)"
        with_sudo apt-get -qq upgrade 1>/dev/null
    }

fi

if using_yum; then
    update_package_lists() {
        local return_code=0

        echo "Updating package lists (yum)"
        with_sudo "\
            yum clean --quiet -y expire-cache \
                && yum check-update --quiet -y
        "
        return_code=$?

        if [[ "${return_code}" = "100" ]]; then
            # Return code 100 means "Updates available". Maybe we should echo
            # something about this.
            return_code=0
        fi

        return ${return_code}
    }

    install_packages() {
        local package_names=$@
        echo Installing packages: ${package_names}
        with_sudo "yum install --quiet -y ${package_names}"
    }

    is_package_installed() {
        local package_name=$1
        with_sudo "rpm -q --quiet ${package_name}"
    }

    upgrade_packages() {
        echo "Upgrading packages with pending upgrades (yum)"
        with_sudo yum update --quiet -y
    }
fi

# OS-agnostic OS package management commands

update_package_lists_if_enabled() {
    if [[ ${UPDATE_PACKAGE_LISTS} = 'yes' ]]; then
        update_package_lists
    else
        return ${SUCCESS}
    fi
}

upgrade_packages_if_enabled() {
    if [[ ${UPGRADE_PACKAGES} = 'yes' ]]; then
        upgrade_packages
    else
        return ${SUCCESS}
    fi
}

#
# Common config tasks
#

ensure_hostname() {
    local host=$1

    if is_platform ubuntu; then
        sudo echo ${host} > /etc/hostname
        sudo echo "127.0.0.1       ${host}" >> /etc/hosts
    elif is_platform fedora; then
        return ${SUCCESS}
    fi

    return ${SUCCESS}
}

ensure_fqdn_hostname() {
    local fqdn_hostname=$1
    # A reboot may be required after running this command.

    if is_platform "Amazon Linux"; then
        with_sudo "\
                find_replace_in_file \
                    \"^HOSTNAME=.*$\" \
                    \"HOSTNAME=${fqdn_hostname}\" \
                    /etc/sysconfig/network \
        " && return ${SUCCESS}
    else
        err_msg "Platform not supported"
        return ${FAILURE}
    fi
}

set_timezone() {
    local timezone_name=$1 # eg "Australia/Brisbane"

    #
    # TODO: ADD SUPPORT for Amazon Linux
    #
    if is_platform "Ubuntu"; then
        # This would probably work for Debian too.
        with_sudo "\
                apt-get install tzdata \
                && echo "${timezone_name}" > /etc/timezone \
                && dpkg-reconfigure -f noninteractive tzdata \
        " && return ${SUCCESS}
    else
        err_msg "Platform not supported"
        return ${FAILURE}
    fi
}

#
# Platform-specific fixes
#

platform_specific_fixes() {
    if is_platform ubuntu; then
        ubuntu_language_pack
    fi
    return ${SUCCESS}
}

ubuntu_language_pack() {
    if ! is_platform ubuntu; then
        echo "(Not on Ubuntu, not installing lanuage pack)"
        return ${SUCCESS}
    fi

    if is_package_installed language-pack-en; then
        echo "(Ubuntu language pack already installed)"
        return ${SUCCESS}
    fi

    install_packages language-pack-en
    with_sudo dpkg-reconfigure locales
}

#
# Waits, confirmations etc
#

await_input() {
    read -p "$1" -n 1 -s
}
