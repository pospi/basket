#!/bin/bash

nodejs__install() {
    if command_exists node; then
        echo node.js is already installed.
        return 0
    fi

    echo Installing node.js...

    install_packages nodejs

    # If we still can't find any node binaries, then we need to compile from
    # source. Load up latest version.

    if ! command_exists node && ! command_exists nodejs; then
        nodejs__install_from_source latest
    fi

    if ! command_exists node && ! command_exists nodejs; then
        echo There was a problem installing nodejs.
        return 1
    fi

    nodejs__install_check_links

    echo Done installing node.js.
}

# Requires Python >2.4 to build
nodejs__install_from_source() {
    local version=$1

    if command_exists node; then
        echo node.js is already installed.
        return 0
    fi

    pushd_q ~

    wget "http://nodejs.org/dist/node-${version}.tar.gz"
    tar zxf "node-${version}.tar.gz"

    mkdir -p Downloads
    mv "node-${version}.tar.gz" Downloads/

    local node_folder=$(ls -1 -d node-* | head -n1);            # :TODO: SCRIPTING LS IS BAD and nathan hates me for it but I am in a hurry soz

    pushd_q "${node_folder}"     # wildcard this as 'latest' contents will be version numbered
    ./configure
    make
    with_sudo make install

    # move the folder afterwards or else we'll have multiple source folders on subsequent runs
    # want to keep it so we can do `make clean`
    popd_q
    mv "${node_folder}" Downloads/

    popd_q

    nodejs__install_check_links
}

nodejs__install_check_links() {
    # Some scripts expect the node.js binary to just be called "node", and on
    # some distros (eg Ubuntu) it's called "nodejs".
    # This adds a symlink so "node" still works.
    # TODO Make this handle `command_exists nodejs/node` being symlinks themselves
    if ! command_exists node; then
        with_sudo ln -s $(which nodejs) /usr/bin/node
    fi
    if ! command_exists nodejs; then
        with_sudo ln -s $(which node) /usr/bin/nodejs
    fi

    # Need to ensure node is accessible by root as well
    if ! is_file /usr/bin/npm; then
    	with_sudo ln -s /usr/local/bin/npm /usr/bin/npm
    fi
    if ! is_file /usr/bin/node; then
    	with_sudo ln -s /usr/local/bin/node /usr/bin/node
    fi
}

nodejs__install_npm() {
    # TODO This could possibly be more robust
    echo "Installing npm (and node.js if needed)..."
    nodejs__install

    if command_exists npm; then
        echo npm is already installed.
        return 0
    fi

    install_packages npm
    echo Done installing npm.
}

nodejs__install_bower() {
    # TODO This could possibly be more robust
    echo "Installing bower (and node.js if needed)..."
    nodejs__install

    if command_exists bower; then
        echo bower is already installed.
        return 0
    fi

    nodejs__npm_global_install_packages bower
    echo Done installing bower.
}

nodejs__install_grunt() {
    # TODO This could possibly be more robust
    echo "Installing grunt (and node.js if needed)..."
    nodejs__install

    if command_exists grunt; then
        echo grunt is already installed.
        return 0
    fi

    nodejs__npm_global_install_packages grunt
    echo Done installing grunt.
}


#
# NPM package management
#
nodejs__npm_global_install_packages() {
    local package_names=$@

    echo Installing globally npm packages: ${package_names}
    with_sudo npm install --global ${package_names} 1>/dev/null 2>>~/npm_global_install.log
}

nodejs__npm_local_install_packages() {
    local package_names=$@
    local working_dir=$(pwd)

    if is_var_empty "${package_names}"; then
        echo "Installing local npm dependencies (in ${working_dir})"
    else
        echo "Installing locally (in ${working_dir}) npm packages: ${package_name}"
    fi

    npm install ${package_names} 1>/dev/null 2>>~/npm_local_install.log
}


#
# Bower package management
#
nodejs__bower_install_packages() {
    local package_names=$@
    local working_dir=$(pwd)

    if is_var_empty "${package_names}"; then
        echo "Installing local bower dependencies (in ${working_dir})"
    else
        echo "Installing locally (in ${working_dir}) bower packages: ${package_name}"
    fi

    bower install --config.interactive=false ${package_names} 1>/dev/null 2>>~/bower_local_install.log
}
